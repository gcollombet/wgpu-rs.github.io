searchState.loadedDescShard("wgpu_test", 0, "Test utilities for the wgpu repository.\nAssert that the test fails for the given reason.\nReason why a test matches a given failure case.\nConditions under which a test should fail or be skipped.\nReason why a test is expected to fail.\nConfiguration for a GPU test.\nIgnore the matching failure.\nThis information determines if a test should run.\nParameters and resources handed to the test function.\nName of adapter expected to fail, or <code>None</code> for any adapter …\nUtility to allow future asynchronous polling.\nBackends expected to fail, or <code>None</code> for any backend.\nBehavior after this case matches a failure.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns true if the provided callback fails validation.\nReturns true if the provided callback encounters an …\nName of driver expected to fail, or <code>None</code> for any driver …\nExecute the given test configuration with the given …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nRun some code in an error scope and assert that validation …\nRun some code in an error scope and assert that validation …\nConditions under which this test should be run, but is …\nOn Dx12, specifically test against the Fxc compiler.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nCreates a test that will run on all gpus on a given system.\nAdds the necessary main function for our gpu test harness.\nImage comparison utilities\nInitialize a wgpu adapter, using the given adapter report …\nInitialize a wgpu device from a given adapter.\nInitialize a wgpu instance with the options from the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMatch a particular kind of failure result.\nMatch a particular message of a failure result.\nInfrastructure for the native, <code>cargo-nextest</code> based harness.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nReason why the test is expected to fail.\nConditions under which this test should be skipped.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nRun some code in an error scope and assert that validation …\nVendor expected to fail, or <code>None</code> for any vendor.\nConfiguration for a GPU test.\nSet the name of the test. Must be unique across all tests …\nSet the parameters that the test needs to succeed.\nMake the test function an asynchronous function/future.\nMake the test function an synchronous function.\nMatch any failure reason.\nAssert that the test fails for the given reason.\nReason why a test matches a given failure case.\nConditions under which a test should fail or be skipped.\nReason why a test is expected to fail.\nIgnore the matching failure.\nTests running on <code>adapter</code>.\nName of adapter expected to fail, or <code>None</code> for any adapter …\nGet a flags value with all known bits set.\nThis case applies to all tests.\nTest whether <code>self</code> applies to <code>info</code>.\nTests running on any of the given backends.\nTests running on <code>backend</code> and <code>adapter</code>.\nBackends expected to fail, or <code>None</code> for any backend.\nBehavior after this case matches a failure.\nGet the underlying bits value.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nName of driver expected to fail, or <code>None</code> for any driver …\nGet a flags value with all bits unset.\nCompares if the actual failures match the expected …\nTest is flaky with the given configuration. Do not assert …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nMatch a particular kind of failure result.\nReturns true if the given failure “satisfies” this …\nMatch a particular message of a failure result.\nTests running on the MoltenVK Vulkan driver on macOS.\nThis case applies to no tests.\nCreate a new failure case.\nMatches this failure case against the given panic …\nMatch a panic.\nFailure result is a panic.\nReturn the reasons why this case should fail.\nReason why the test is expected to fail.\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nMatches this failure case against the given validation …\nMatch a validation error.\nFailure result is a validation error.\nVendor expected to fail, or <code>None</code> for any vendor.\nTests running under WebGL.\nMatch an error with a message.\nMessage associated with a failure result.\nThe FLIP library generates a per-pixel error map where 0.0 …\nIf the mean error is greater than the given value, the …\nIf the given percentile is greater than the given value, …\nbuffer for color or depth aspects\nbuffer for stencil aspect\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ntexture depth or array layer count\ntexture format\ntexture height\ntexture width\nReturns the argument unchanged.\nInitialize the logger for the test runner.\nInitialize a wgpu adapter, using the given adapter report …\nInitialize a wgpu device from a given adapter.\nInitialize a wgpu instance with the options from the …\nCalls <code>U::from(self)</code>.\nWhen this guard is active, enforces that there is only a …\nTrue if a test is in progress somewhere in the process, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nContains the error value\nReturn value for the main function.\nContains the success value\nReturns the argument unchanged.\nAdapter index is only used for naming the test, the …\nCalls <code>U::from(self)</code>.\nMain function that runs every gpu function once for every …\nInformation about a test, including if if it should be …\nThis information determines if a test should run.\nEnable testing against the noop backend and miri.\nMark the test as always failing, but not to be skipped.\nConditions under which this test should be run, but is …\nSet the list of features this test requires.\nOn Dx12, specifically test against the Fxc compiler.\nReturns the argument unchanged.\nSets the instance flags that the test requires.\nCalls <code>U::from(self)</code>.\nSet the limits needed for the test.\nMark the test as always failing, and needing to be skipped.\nConditions under which this test should be skipped.\nSet of common features that most internal tests require …\nA single report of the capabilities of an Adapter.\nReport specifying the capabilities of the GPUs on the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new GpuReport with a single noop adapter.\nParameters and resources handed to the test function.\nExecute the given test configuration with the given …")