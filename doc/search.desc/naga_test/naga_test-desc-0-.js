searchState.loadedDescShard("naga_test", 0, "A serialization of the <code>naga::valid::ModuleInfo</code>, in RON …\nA serialization of the <code>naga::Module</code>, in RON format.\nInformation about a shader input file.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe input filename name, without a directory.\nReturn an iterator that produces an <code>Input</code> for each entry …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nReturn the path to the input directory.\nReturn the path to the input file.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nTrue if output filenames should add the output extension …\nRead an input file and its corresponding parameters file.\nDefaults for <code>spv</code> and <code>glsl</code> snapshots.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nReturn the path to the output directory.\nReturn the contents of the input file as a vector of bytes.\nReturn this input’s parameter file, parsed.\nReturn the contents of the input file as a string.\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe subdirectory of <code>tests/in</code> to which this input belongs, …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nDefaults to <code>Targets::non_wgsl_default()</code> for <code>spv</code> and <code>glsl</code> …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nDefaults for <code>wgsl</code> snapshots.\nWrite <code>data</code> to a file corresponding to this input file in …")