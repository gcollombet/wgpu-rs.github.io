searchState.loadedDescShard("wgpu_test", 0, "Test utilities for the wgpu repository.\nAssert that the test fails for the given reason.\nReason why a test matches a given failure case.\nConditions under which a test should fail or be skipped.\nReason why a test is expected to fail.\nConfiguration for a GPU test.\nIgnore the matching failure.\nThis information determines if a test should run.\nParameters and resources hadned to the test function.\nTests running on <code>adapter</code>.\nName of adapter expected to fail, or <code>None</code> for any adapter …\nGet a flags value with all known bits set.\nThis case applies to all tests.\nUtility to allow future asynchronous polling.\nTests running on any of the given backends.\nTests running on <code>backend</code> and <code>adapter</code>.\nBackends expected to fail, or <code>None</code> for any backend.\nBehavior after this case matches a failure.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nName of driver expected to fail, or <code>None</code> for any driver …\nGet a flags value with all bits unset.\nExecute the given test configuration with the given …\nMark the test as always failing, but not to be skipped.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nRun some code in an error scope and assert that validation …\nRun some code in an error scope and assert that validation …\nConditions under which this test should be run, but is …\nSet the list of features this test requires.\nTest is flaky with the given configuration. Do not assert …\nOn Dx12, specifically test against the Fxc compiler.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nCreates a test that will run on all gpus on a given system.\nAdds the necissary main function for our gpu test harness.\nImage comparison utilities\nInitialize a wgpu adapter, using the given adapter report …\nInitialize a wgpu device from a given adapter.\nInitialize a wgpu instance with the options from the …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nSet the limits needed for the test.\nTests running on the MoltenVK Vulkan driver on macOS.\nSet the name of the test. Must be unique across all tests …\nInfrastructure for the native, <code>cargo-nextest</code> based harness.\nThis case applies to no tests.\nCreate a new failure case.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nMatches this failure case against the given panic …\nMatch a panic.\nSet the parameters that the test needs to succeed.\nReturn the reasons why this case should fail.\nReason why the test is expected to fail.\nThe intersection of a source flags value with the …\nMake the test function an asynchronous function/future.\nMake the test function an synchronous function.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nMark the test as always failing, and needing to be skipped.\nConditions under which this test should be skipped.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nSet of common features that most internal tests require …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nRun some code in an error scope and assert that validation …\nMatches this failure case against the given validation …\nMatch a validation error.\nVendor expected to fail, or <code>None</code> for any vendor.\nTests running under WebGL.\nMatch an error with a message.\nThe FLIP library generates a per-pixel error map where 0.0 …\nIf the mean error is greater than the given value, the …\nIf the given percentile is greater than the given value, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nContains the error value\nReturn value for the main function.\nContains the success value\nMain function that runs every gpu function once for every …")