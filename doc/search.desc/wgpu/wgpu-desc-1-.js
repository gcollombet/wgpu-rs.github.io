searchState.loadedDescShard("wgpu", 1, "Aspect of the texture. Color textures must be […\nBase array layer.\nBase mip level.\nThe dimension of the texture view. For 1D textures, this …\nFormat of the texture view. Either must be the same as the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDebug label of the texture view. This will show up in …\nMip level count. If <code>Some(count)</code>, <code>base_mip_level + count</code> …\nThe allowed usage(s) for the texture view. Must be a …\nDescriptor to create top level acceleration structures.\nTop Level Acceleration Structure (TLAS).\nEntry for a top level acceleration structure build. Used …\nThe safe version of TlasEntry, containing TlasInstances …\nGet the binding resource for the underling acceleration …\nFlags for the bottom level acceleration structure.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a reference to all instances.\nGet a single mutable reference to an instance. Returns …\nGet a mutable slice to a range of instances. Returns None …\nReference to the raw instance buffer, each instance is …\nNumber of instances in the instance buffer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLabel for the top level acceleration structure.\nNumber of instances that can be stored in the acceleration …\nConstruct TlasPackage consuming the Tlas (prevents …\nConstruct TlasPackage consuming the Tlas (prevents …\nGet a reference to the underling Tlas.\nReference to the acceleration structure.\nUpdate mode for the bottom level acceleration structure.\nThis method will start the wgpu_core level command …\nConfigured device is needed to know which backend code to …\nThe error sink with which to report errors. <code>None</code> if the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSafety\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nImplements PartialEq, Eq, PartialOrd, Ord, and Hash for a …\nImplements PartialEq, Eq, PartialOrd, Ord, and Hash for a …\nCalls <code>U::from(self)</code>.\nTypes that represent a “Backend” for the wgpu API.\nGenerates Dispatch types for each of the interfaces. Each …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a single trait with the given supertraits and a …\nDescribes a Buffer when allocating.\nUtility methods not meant to be in the main API.\nArgument buffer layout for <code>dispatch_indirect</code> commands.\nCPU accessible buffer used to download data back from the …\nArgument buffer layout for <code>draw_indexed_indirect</code> commands.\nArgument buffer layout for <code>draw_indirect</code> commands.\nThe texture is laid out densely in memory as:\nThe texture is laid out densely in memory as:\nMethods shared by <code>RenderPass</code> and <code>RenderBundleEncoder</code>.\nEfficiently performs many buffer writes by sharing and …\nTexture Blitting (Copying) Utility\nA builder for the <code>TextureBlitter</code> utility. If you want the …\nOrder in which texture data is laid out in memory.\nAdds extra conversion functions to <code>TextureFormat</code>.\nChunks into which we are accumulating data to be …\nAligns a <code>value</code> to an <code>alignment</code>.\nReturns the bytes representation of the struct, ready to …\nReturns the bytes representation of the struct, ready to …\nReturns the bytes representation of the struct, ready to …\nThe value added to the vertex index before indexing into …\nChunks that have scheduled transfers already; they are …\nContents of a buffer on creation.\nCreates a Buffer with data to initialize it.\nUpload an entire texture and its mipmaps from a source …\nDraws primitives from the active vertex buffer(s).\nDraws indexed primitives using the active index buffer and …\nDraws indexed primitives using the active index buffer and …\nDraws primitives from the active vertex buffer(s) based on …\nThe first index within the index buffer.\nThe instance ID of the first instance to draw.\nThe instance ID of the first instance to draw.\nThe Index of the first vertex to draw.\nChunks that are back from the GPU and ready to be mapped …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFinds the <code>TextureFormat</code> corresponding to the given …\nThe number of indices to draw.\nInitialize the adapter obeying the WGPU_ADAPTER_NAME …\nInitialize the adapter obeying the WGPU_ADAPTER_NAME …\nThe number of instances to draw.\nThe number of instances to draw.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermines whether the <code>Backends::BROWSER_WEBGPU</code> backend is …\nDebug label of a buffer. This will show up in graphics …\nVersion of make_spirv intended for use with …\nCreate an new instance of wgpu, but disabling …\nA recommended key for storing <code>PipelineCache</code>s for the …\nAsynchronously read the contents of a buffer.\nFree chunks are received here to be put on <code>self.free_chunks</code>…\nWhen closed chunks are mapped again, the map callback …\nSets the active bind group for a given bind group index. …\nSets the active index buffer.\nSets the active render pipeline.\n<code>wgt::Features::PUSH_CONSTANTS</code> must be enabled on the …\nAssign a vertex buffer to a slot.\nFinds the <code>StorageFormat</code> corresponding to the given …\nUsages of a buffer. If the buffer is used in any way that …\nThe number of vertices to draw.\nThe number of work groups in X dimension.\nThe number of work groups in Y dimension.\nThe number of work groups in Z dimension.\nEfficiently performs many buffer writes by sharing and …\nChunks into which we are accumulating data to be …\nAllocate a staging belt slice with the given <code>size</code> and …\nChunks that have scheduled transfers already; they are …\nPrepare currently mapped buffers for use in a submission.\nChunks that are back from the GPU and ready to be mapped …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new staging belt.\nRecall all of the closed buffers back to be reused.\nMove all chunks that the GPU is done with (and are now …\nFree chunks are received here to be put on <code>self.free_chunks</code>…\nWhen closed chunks are mapped again, the map callback …\nAllocate a staging belt slice of <code>size</code> to be copied into …\n<code>Sync</code> wrapper that works by providing only exclusive access.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDescribes a Buffer when allocating.\nUtility methods not meant to be in the main API.\nContents of a buffer on creation.\nCreates a Buffer with data to initialize it.\nUpload an entire texture and its mipmaps from a source …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDebug label of a buffer. This will show up in graphics …\nUsages of a buffer. If the buffer is used in any way that …\nMethods shared by <code>RenderPass</code> and <code>RenderBundleEncoder</code>.\nDraws primitives from the active vertex buffer(s).\nDraws indexed primitives using the active index buffer and …\nDraws indexed primitives using the active index buffer and …\nDraws primitives from the active vertex buffer(s) based on …\nSets the active bind group for a given bind group index. …\nSets the active index buffer.\nSets the active render pipeline.\n<code>wgt::Features::PUSH_CONSTANTS</code> must be enabled on the …\nAssign a vertex buffer to a slot.\nInitialize the adapter obeying the WGPU_ADAPTER_NAME …\nInitialize the adapter obeying the WGPU_ADAPTER_NAME …\nDetermines whether the <code>Backends::BROWSER_WEBGPU</code> backend is …\nCreate an new instance of wgpu, but disabling …\nTexture Blitting (Copying) Utility\nA builder for the <code>TextureBlitter</code> utility. If you want the …\nSets the <code>BlendState</code> that is used.\nReturns a new <code>TextureBlitter</code> with given settings.\nCopies the data from the source <code>TextureView</code> to the target …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a new <code>TextureBlitterBuilder</code>\nReturns a <code>TextureBlitter</code> with default settings.\nSets the <code>Sampler</code> Filtering Mode")